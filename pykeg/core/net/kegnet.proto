// kegnet.proto - protocol buffer description for kegnet
// protocol buffers are described here:
//   http://code.google.com/p/protobuf/
//

//
// Common messages
//

message StatusReply {
  enum StatusCode {
    OK = 200;
    ERROR = 400;
  }
  required StatusCode code = 1;
  optional string description = 2;
}

message PingMessage {
  required fixed32 seqn = 1;
}

//
// Device messages
//

message TapInfo {
  required string name = 1;
}

message TapRequest {
  required ClientHandle handle = 1;
  required TapInfo tap_info = 2;
}

message MeterReading {
  required ClientHandle handle = 1;

  // Name of the flow device
  required string name = 2;

  // Current volume, in ticks
  required uint32 value = 3;
}

message ThermoReading {
  required ClientHandle handle = 1;

  // Name of the thermo device.
  required string name = 2;

  // Current temperature, in degC/1000.
  required uint32 value = 3;
}

message OutputStatus {
  enum Status {
    DISABLED = 0;
    ENABLED = 1;
  }

  required ClientHandle handle = 1;

  // Name of the output device.
  required string name = 2;

  // Current status of the output.
  required Status status = 3;
}

message ClientHandle {
  required string client_name = 1;
}

//
// Access control
//

message FlowCredentials {
  // The username that the credentials apply to
  required string username = 1;

  // The tap name the credentials apply to. This is specified by the
  // AuthDevice.  The special name "__all__" authorizes the user on all
  // available taps.
  required string tap_name = 2;

  // Duration, in seconds, that the credentials are valid.
  required uint32 valid_seconds = 3;

}

//
// Core-internal state
//

message FlowDevice {
  // The name of the device, eg "flow0"
  required string device_name = 1;

  // Number of ticks per liter of fluid.
  required uint32 ticks_per_liter = 2 [default = 2200];
}

message ThermoDevice {
  // The name of the device, eg "temp0"
  required string device_name = 1;

  // The smallest valid temperature, in DegC/1000 (inclusive).  For example, the
  // value "-50000" means temperatures less than -50 degrees C are treated as
  // invalid on this sensor.
  required int32 lower_bound_mdegc = 2 [default = -55000]; // -55.0 C

  // The greatest valid temperature; same as previous.
  required int32 upper_bound_mdegc = 3 [default = 125000]; // +125.0 C
}

message OutputDevice {
  // The name of the device, eg "relay0"
  required string device_name = 1;
}

message ClientConfig {
  // The name of the client, eg "gameroom"
  required string client_name = 1;

  // Configuration of devices associated with this client.
  repeated FlowDevice flow_device_list = 2;
  repeated ThermoDevice thermo_device_list = 3;
  repeated OutputDevice output_device_list = 4;
}

message CoreState {
  repeated ClientConfig client_list = 1;
}

// Core Service
// This is the primary service used by kegnet clients attaching to the Core. It
// provides all methods related to sensor/device/flow updates.
service Core {
  // Connect to the Kegnet service. Prerequisite for all other requests.
  rpc Login (ClientConfig) returns (ClientHandle);
  rpc Logout (ClientHandle) returns (StatusReply);

  // Device and sensor-related RPCs.
  rpc PostMeterReading (MeterReading) returns (StatusReply);
  rpc PostOutputStatus (OutputStatus) returns (StatusReply);
  rpc PostThermalReading (ThermoReading) returns (StatusReply);

  // Force-start a flow.
  rpc StartFlow (TapRequest) returns (StatusReply);
  // Force-end a flow.
  rpc StopFlow (TapRequest) returns (StatusReply);
}

