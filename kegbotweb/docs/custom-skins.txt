SKIN OVERVIEW

Skins are a way for you to customize the look and feel of the kegbot frontend
without having to do much coding. If you know HTML, and a few special
constructs that let you exchange data with the frontend, then you should be
able to make a skin.

Skins live in the 'skins' directory; each subdirectory of the skins dir should
be a frontend skin.

SKIN STRUCTURE

Here is what a skin directory tree looks like:

   /skins
      /default
         /css
            # css files go here
         /images
            # images used by the skin, such as the header image or drink info
            # icon, go in this directory
         /templates
            /pages
               # templates for each page go here. each page (such as
               # drink-info.php, index.php, etc) has a single template. this
               # template may itself include other templates.
            /boxes
               # this is a directory of templates for "boxes" of information,
               # that may be used on more than one page. for example, the
               # drinker mugshot box lives here; it is used on the leader
               # board page and the drinker info page, among other places
            /spans
               # spans are like boxes, in that they are commonly used
               # templates. presently, each data type (for example, a drink, a
               # keg, or a user) has a span defined here -- it is essentially
               # the html table row format for that data type
            /misc
               # other templates (that don't fit somewhere above) live here, for
               # now

TEMPLATE FORMAT

We use the Smarty templating engine, which is a PHP-specific template
language. For more information, see http://smarty.php.net. Being familiar with
Smarty is worthwhile.

SMARTY PLUGINS

Each template can call one of several funcitons provided by the frontend to
get data from it. For example, in pages/drink-info.tpl, we have the following
code:

   {load_drink assign="drink" id=$getvars.drink}

This coad calls the "load_drink" smarty function, which is defined in
src/includes/smarty_plugins/. It takes to parameters: the output variable
("assign"), and the input id ($getvars.drink, for the HTTP GET data stored in
the "drink" parameter).

After calling this function, the frontend returns to the template, with the
drink object stored in the output variable $drink. Your template can now show
information about that drink (see drink.class.php for a look at what kind of
information lives in that object).

